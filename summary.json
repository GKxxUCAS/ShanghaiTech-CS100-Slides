{
  "0": {
    "title": "Introduction",
    "keywords": [
      "programming",
      "machine code",
      "assembly code",
      "high-level languages",
      "compiler",
      "interpreter",
      "GCC",
      "MSVC",
      "Clang",
      "ICC",
      "C",
      "C++",
      "ISO standards",
      "C17",
      "C++17",
      "cppreference",
      "syntax",
      "data abstraction",
      "object-oriented programming",
      "course structure",
      "homework",
      "midterm exam",
      "quizzes",
      "recitations",
      "Piazza",
      "textbooks",
      "VSCode",
      "MinGW"
    ],
    "brief": "Introduction to programming concepts, covering machine code, assembly, high-level languages, compilers, and interpreters. Focus on C and C++ standardization (C17 and C++17), course objectives including syntax and OOP, assessment details, and environment setup recommendations."
  },
  "1": {
    "title": "The First C Program",
    "keywords": [
      "C programming",
      "main function",
      "printf",
      "scanf",
      "stdio.h",
      "return 0",
      "int data type",
      "function definition",
      "arguments",
      "parameters",
      "whitespace handling",
      "newline character",
      "standard input/output",
      "K&R C",
      "ANSI C",
      "ISO C"
    ],
    "brief": "Introduction to C programming, covering the history of C, writing a simple 'Hello World' program, understanding the main function, using printf for output and scanf for input, handling integers and whitespaces, and basic function syntax with examples."
  },
  "2": {
    "title": "Variables I and Arithmetic Types",
    "keywords": [
      "variable declaration",
      "type",
      "static typing",
      "compile-time",
      "local variable",
      "global variable",
      "initialization",
      "arithmetic types",
      "integer types",
      "signed",
      "unsigned",
      "width",
      "bits",
      "bytes",
      "real floating types",
      "float",
      "double",
      "long double",
      "character types",
      "char",
      "signed char",
      "unsigned char",
      "ASCII",
      "escape sequences",
      "boolean type",
      "bool",
      "stdbool.h",
      "scanf",
      "printf",
      "format specifiers",
      "best practices",
      "readability",
      "meaningful names"
    ],
    "brief": "Covers variable declaration with types, static typing, local vs global variables, initialization, and arithmetic types including integers, floating-point, characters, and booleans, with best practices for code readability and type selection."
  },
  "3": {
    "title": "Operators and Control Flow I",
    "keywords": [
      "operators",
      "arithmetic operators",
      "+",
      "-",
      "*",
      "/",
      "%",
      "compound assignment",
      "+=",
      "-=",
      "*=",
      "/=",
      "%=",
      "signed integer overflow",
      "undefined behavior",
      "unsigned integers",
      "modulo",
      "increment",
      "decrement",
      "++",
      "--",
      "postfix",
      "prefix",
      "control flow",
      "if-else",
      "while",
      "for",
      "break",
      "continue",
      "type conversion",
      "integer division",
      "truncated towards zero",
      "remainder",
      "dangling else",
      "formatter"
    ],
    "brief": "Covers arithmetic operators, type conversions, compound assignments, signed and unsigned integer behaviors, increment/decrement operators, and control flow statements including if-else, while, for loops with break and continue, emphasizing best practices and avoiding undefined behaviors."
  },
  "4": {
    "title": "Operators and Control Flow II, Functions",
    "keywords": [
      "operator precedence",
      "associativity",
      "evaluation order",
      "comparison operators",
      "logical operators",
      "conditional operator",
      "assignment operator",
      "do-while",
      "switch-case",
      "functions",
      "call and return",
      "function declaration",
      "function definition",
      "scopes",
      "name lookup",
      "undefined behavior",
      "short-circuit evaluation",
      "return type",
      "break statement"
    ],
    "brief": "Covers operator precedence, associativity, and evaluation order; comparison, logical, conditional, and assignment operators; control flow with do-while and switch-case; function concepts including call, return, declaration, definition, scopes, and name lookup; and best practices to avoid undefined behavior and improve code readability."
  },
  "5": {
    "title": "Variables II, Pointers and Arrays I",
    "keywords": [
      "static variables",
      "initialization",
      "const qualifier",
      "pointers",
      "arrays",
      "dereference",
      "address-of operator",
      "null pointer",
      "wild pointer",
      "argument passing",
      "swap function",
      "nested arrays",
      "undefined behavior",
      "implicit initialization",
      "array subscript",
      "brace-enclosed initialization"
    ],
    "brief": "Covers local static variables for persistent state, variable initialization rules (empty-initialization for static/global, indeterminate for local non-static), const qualifier for immutability, pointers including declaration, dereferencing, null and wild pointers, argument passing by pointer for modification, arrays with initialization, subscripting, and nested arrays, emphasizing avoidance of undefined behavior."
  },
  "6": {
    "title": "Pointers and Arrays II",
    "keywords": [
      "pointers",
      "arrays",
      "pointer arithmetic",
      "array-to-pointer conversion",
      "pass array to function",
      "nested arrays",
      "pointer to array",
      "ptrdiff_t",
      "subscript operator",
      "return array from function",
      "undefined behavior",
      "sizeof",
      "dereferencing",
      "local variable lifetime",
      "function parameters",
      "implicit conversion",
      "strict aliasing"
    ],
    "brief": "Advanced concepts in pointers and arrays, including pointer arithmetic, array-to-pointer conversion, passing arrays to functions (including nested arrays), and avoiding undefined behaviors. Covers techniques for array manipulation, function design with pointers, and when arrays are necessary versus alternative approaches."
  },
  "7": {
    "title": "Pointers and Arrays III, Dynamic Memory, Strings",
    "keywords": [
      "const",
      "pointer to const",
      "void *",
      "malloc",
      "calloc",
      "free",
      "dynamic memory",
      "heap",
      "stack",
      "strings",
      "null character",
      "strlen",
      "strcpy",
      "strcmp",
      "strcat",
      "strchr",
      "fgets",
      "string literals",
      "undefined behavior",
      "memory leak",
      "dangling pointer"
    ],
    "brief": "Covers pointers to const for preventing modifications, void pointers for generic memory handling, dynamic memory allocation using malloc, calloc, and free with heap management, and C-style strings including null termination, I/O functions, and standard string manipulation functions like strlen and strcpy."
  },
  "8": {
    "title": "Dynamic Memory and Strings Revisited",
    "keywords": [
      "dynamic memory",
      "malloc",
      "free",
      "stack memory",
      "heap memory",
      "memory allocation",
      "memory deallocation",
      "dangling pointer",
      "memory leak",
      "undefined behavior",
      "strings",
      "strlen",
      "scanf",
      "printf",
      "fgets",
      "puts",
      "null character",
      "command line arguments",
      "argc",
      "argv",
      "realloc strategy",
      "buffer management",
      "ungetc",
      "memcpy"
    ],
    "brief": "Covers dynamic memory management with malloc and free, including stack vs heap differences, allocation for arrays and 2D structures, proper deallocation to avoid leaks and dangling pointers. Explores string handling, command line arguments via argc and argv, and demonstrates reading strings of unknown length using dynamic resizing and memory management techniques."
  },
  "9": {
    "title": "Struct, recursion",
    "keywords": [
      "struct",
      "recursion",
      "member-access operator",
      "malloc",
      "free",
      "sizeof",
      "memory alignment",
      "initializer list",
      "designators",
      "compound literals",
      "member-wise copy",
      "factorial",
      "print function",
      "selection-sort",
      "quick power",
      "recursive algorithm"
    ],
    "brief": "Covers defining and using structs for custom data types, including member access, dynamic allocation, size considerations, and initialization techniques. Introduces recursion with examples like factorial calculation, printing integers, and implementing selection-sort recursively, emphasizing recursive thinking and algorithm design."
  },
  "10": {
    "title": "C Summary",
    "keywords": [
      "statically-typed",
      "arithmetic types",
      "pointer types",
      "array types",
      "struct types",
      "variables",
      "initialization",
      "scopes",
      "expressions",
      "operators",
      "control flow",
      "functions",
      "main function",
      "standard library",
      "Vector example",
      "deep copy",
      "memory management",
      "malloc",
      "free",
      "calloc",
      "memcpy",
      "undefined behavior",
      "implementation-defined",
      "null pointer",
      "decay",
      "short-circuit evaluation",
      "pointer arithmetic",
      "compound assignment",
      "member access",
      "function declaration",
      "function definition",
      "argument passing",
      "command-line arguments",
      "stdio.h",
      "string.h",
      "ctype.h",
      "stdlib.h",
      "limits.h",
      "math.h",
      "assert",
      "size_t",
      "double",
      "int",
      "char",
      "short",
      "long",
      "long long",
      "signed",
      "unsigned",
      "sizeof",
      "NULL",
      "&",
      "*",
      "->",
      ".",
      "if",
      "for",
      "while",
      "do-while",
      "switch",
      "break",
      "continue",
      "return",
      "const",
      "static",
      "global",
      "local",
      "uninitialized",
      "empty-initialized",
      "best practices",
      "data abstraction",
      "OOP",
      "C++"
    ],
    "brief": "Summarizes key C programming concepts including types, variables, expressions, control flow, functions, and the standard library, with a practical example of implementing a Vector struct to illustrate memory management, deep copying, and common pitfalls, while hinting at C++ solutions for data abstraction and object-oriented programming."
  },
  "11": {
    "title": "C++ Introduction, Strings",
    "keywords": [
      "C++",
      "std::string",
      "iostream",
      "std::cin",
      "std::cout",
      "namespace std",
      "operator overloading",
      "range-based for loops",
      "concatenation",
      "size()",
      "empty()",
      "getline",
      "to_string",
      "stoi",
      "stol",
      "memory management",
      "better C",
      "multi-paradigm",
      "standardization",
      "C++98",
      "C++11",
      "C++17",
      "C++20"
    ],
    "brief": "Introduction to C++ history, basic I/O using iostream, namespace std for avoiding name collisions, and comprehensive coverage of std::string including initialization, operations, concatenation, comparison, and numeric conversions."
  },
  "12": {
    "title": "References, std::vector",
    "keywords": [
      "references",
      "std::vector",
      "alias",
      "bind",
      "initialization",
      "lvalue",
      "reference-to-const",
      "push_back",
      "pop_back",
      "range-based for loop",
      "subscript",
      "copy",
      "dynamic array",
      "class template",
      "size",
      "empty",
      "clear",
      "back",
      "front",
      "at"
    ],
    "brief": "Covers C++ references as aliases for objects, including declaration, binding, and usage in range-based for loops and function parameters to avoid copies. Introduces std::vector as a dynamic array class template, detailing creation, element access, modification, and traversal with range-based for loops."
  },
  "13": {
    "title": "\"C\" in C++",
    "keywords": [
      "bool",
      "true",
      "false",
      "const",
      "type system",
      "stronger type checking",
      "narrowing conversions",
      "explicit casts",
      "static_cast",
      "const_cast",
      "reinterpret_cast",
      "dynamic_cast",
      "auto",
      "decltype",
      "default arguments",
      "function overloading",
      "overload resolution",
      "nullptr",
      "range-based for loops",
      "array traversal",
      "reference to array"
    ],
    "brief": "C++ enhances C with a stronger type system, including built-in bool type, stricter type checking, and explicit cast operators like static_cast, const_cast, and reinterpret_cast. It covers type deduction with auto and decltype, function features such as default arguments and overloading, and revisits range-based for loops for array traversal."
  },
  "14": {
    "title": "Class Basics I",
    "keywords": [
      "class",
      "struct",
      "members",
      "data members",
      "member functions",
      "access control",
      "private",
      "public",
      "this pointer",
      "const member functions",
      "constructors",
      "constructor initializer list",
      "default constructor",
      "in-class initializers",
      "default-initialization",
      "overloading",
      "syntax",
      "best practices"
    ],
    "brief": "Covers the basics of classes in C++, including member types, access control with private and public specifiers, the this pointer, const member functions for state immutability, constructors with initializer lists and overloading, and the role and design considerations of default constructors."
  },
  "15": {
    "title": "Constructors, Destructors, Copy Control",
    "keywords": [
      "constructors",
      "destructors",
      "copy constructor",
      "copy assignment operator",
      "lifetime of objects",
      "scope",
      "new",
      "delete",
      "dynamic memory",
      "resource management",
      "rule of three",
      "synthesized functions",
      "defaulted functions",
      "deleted functions",
      "self-assignment safe",
      "operator overloading",
      "Dynarray example",
      "private members",
      "encapsulation",
      "value-initialization"
    ],
    "brief": "Covers object lifetime, constructors and destructors for resource management, copy control including copy constructor and copy assignment operator, with examples like the Dynarray class, emphasizing the rule of three for classes managing resources."
  },
  "16": {
    "title": "Class Basics II",
    "keywords": [
      "using",
      "type alias",
      "static",
      "friend",
      "destructor",
      "class scope",
      "ClassName::",
      "accessibility",
      "member functions",
      "incomplete type",
      "definition",
      "declaration",
      "std::string::size_type",
      "static data member",
      "static member function",
      "friend function",
      "friend class",
      "constructor",
      "compiler-generated",
      "cleanup",
      "resource management"
    ],
    "brief": "Covers advanced class features including type alias members with 'using', static members for class-wide data and functions, friend declarations for accessing private members, distinctions between class definitions and declarations, and detailed discussion of destructors for resource cleanup and member destruction order."
  },
  "17": {
    "title": "Rvalue References and Move",
    "keywords": [
      "rvalue references",
      "move constructor",
      "move assignment operator",
      "std::move",
      "rule of five",
      "copy elision",
      "NRVO",
      "lvalue",
      "rvalue",
      "noexcept",
      "overload resolution",
      "synthesized move operations",
      "memory management",
      "resource stealing",
      "temporary objects"
    ],
    "brief": "Covers rvalue references to distinguish lvalues from rvalues, enabling move semantics for efficient resource management. Introduces move constructor and move assignment operator to steal resources from temporary objects, the rule of five for defining special member functions, and std::move for casting lvalues to rvalues. Discusses optimizations like copy elision and NRVO to avoid unnecessary copies."
  },
  "18": {
    "title": "Smart Pointers",
    "keywords": [
      "smart pointers",
      "std::unique_ptr",
      "std::shared_ptr",
      "memory management",
      "destructors",
      "move semantics",
      "reference counting",
      "exclusive ownership",
      "shared ownership",
      "std::make_unique",
      "std::make_shared",
      "deleter",
      "reference counter",
      "move-only type",
      "automatic memory management",
      "zero-overhead",
      "best practices"
    ],
    "brief": "Covers smart pointers in C++ for automatic memory management, focusing on std::unique_ptr for exclusive ownership with move semantics and zero overhead, and std::shared_ptr for shared ownership using reference counting, including creation methods, operations, and best practices to avoid memory leaks."
  },
  "19": {
    "title": "Operator Overloading",
    "keywords": [
      "operator overloading",
      "member function",
      "non-member function",
      "Rational class",
      "arithmetic operators",
      "relational operators",
      "increment operator",
      "decrement operator",
      "IO operators",
      "Dynarray class",
      "subscript operator",
      "WindowPtr class",
      "dereference operator",
      "member access operator",
      "user-defined type conversions",
      "explicit conversion",
      "implicit conversion",
      "type conversion operator",
      "contextual conversion to bool",
      "best practices"
    ],
    "brief": "Covers operator overloading in C++ for user-defined types, including arithmetic, relational, increment/decrement, IO, subscript, dereference, and member access operators, with examples using Rational, Dynarray, and WindowPtr classes. Also discusses user-defined type conversions, explicit vs. implicit conversions, and best practices to avoid repetition and abuse."
  },
  "20": {
    "title": "Iterators and Algorithms",
    "keywords": [
      "iterators",
      "algorithms",
      "std::begin",
      "std::end",
      "range-based for loop",
      "dereferenceable",
      "invalidation",
      "ForwardIterator",
      "BidirectionalIterator",
      "RandomAccessIterator",
      "std::sort",
      "std::copy",
      "std::find",
      "std::for_each",
      "predicates",
      "function objects",
      "lambda expressions",
      "capture list",
      "container initialization",
      "iterator categories"
    ],
    "brief": "Covers iterators as generalized pointers for container access, including operations, categories, and range handling. Introduces standard library algorithms that use iterators for operations like sorting, copying, and finding, with emphasis on predicates, function objects, and lambda expressions for customization."
  },
  "21": {
    "title": "Inheritance and Polymorphism I",
    "keywords": [
      "inheritance",
      "polymorphism",
      "dynamic binding",
      "virtual functions",
      "override",
      "protected members",
      "base class",
      "derived class",
      "constructor initializer list",
      "destructor",
      "upcasting",
      "downcasting",
      "dynamic_cast",
      "static_cast",
      "slicing",
      "copy-control",
      "smart pointers",
      "RTTI"
    ],
    "brief": "Covers inheritance in C++ to model 'is-a' relationships, including defining subclasses, protected members, and constructor/destructor behavior. Explains dynamic binding through virtual functions for polymorphism, upcasting, and the use of override. Discusses best practices for virtual destructors, avoiding downcasting with dynamic_cast, and handling copy-control in derived classes."
  },
  "22": {
    "title": "Inheritance and Polymorphism II",
    "keywords": [
      "abstract base class",
      "pure virtual function",
      "virtual",
      "override",
      "inheritance",
      "polymorphism",
      "is-a relationship",
      "interface",
      "implementation",
      "Shape",
      "Rectangle",
      "abstract class",
      "dynamic binding",
      "compile-time polymorphism",
      "run-time polymorphism",
      "Effective C++",
      "public inheritance",
      "default implementation",
      "virtual table",
      "destructor"
    ],
    "brief": "Covers abstract base classes and pure virtual functions to define interfaces without implementations, explores the 'is-a' relationship in public inheritance with examples like birds and squares, and distinguishes between inheritance of interface versus implementation using pure and impure virtual functions, emphasizing robust design to prevent errors at compile-time."
  },
  "23": {
    "title": "More on STL: Sequence Containers and Associative Containers",
    "keywords": [
      "STL",
      "Standard Template Library",
      "containers",
      "sequence containers",
      "associative containers",
      "vector",
      "deque",
      "list",
      "forward_list",
      "array",
      "set",
      "map",
      "multiset",
      "multimap",
      "unordered_set",
      "unordered_map",
      "iterators",
      "algorithms",
      "function objects",
      "adaptors",
      "stack",
      "queue",
      "priority_queue",
      "begin",
      "end",
      "size",
      "empty",
      "push_back",
      "pop_back",
      "push_front",
      "pop_front",
      "insert",
      "erase",
      "find",
      "count",
      "operator[]",
      "structured binding",
      "iterator categories",
      "BidirectionalIterator",
      "RandomAccessIterator",
      "ForwardIterator",
      "logarithmic time complexity",
      "hash tables",
      "binary search trees"
    ],
    "brief": "Covers the Standard Template Library (STL) in C++, focusing on sequence containers like vector, deque, list, forward_list, and array, and associative containers like set and map, including their interfaces, iterators, and time complexities. Also touches on unordered associative containers, function objects, and adaptors, with examples of usage and key operations."
  },
  "24": {
    "title": "Exception Handling and Exception Safety",
    "keywords": [
      "exception handling",
      "throw",
      "try",
      "catch",
      "stack unwinding",
      "std::bad_alloc",
      "std::out_of_range",
      "std::exception",
      "noexcept",
      "exception safety",
      "nothrow guarantee",
      "strong guarantee",
      "weak guarantee",
      "function-try-block",
      "what()",
      "std::terminate",
      "move operations",
      "copy-and-swap idiom"
    ],
    "brief": "Covers exception handling in C++, including throwing and catching exceptions, standard exception classes, stack unwinding, and exception safety guarantees (nothrow, strong, weak). Discusses the noexcept specifier, move operations, and practical examples like input failure and strcpy error handling."
  },
  "25": {
    "title": "Templates I",
    "keywords": [
      "templates",
      "function templates",
      "class templates",
      "alias templates",
      "variable templates",
      "non-type template parameters",
      "template argument deduction",
      "instantiation",
      "typename",
      "class",
      "const T &",
      "operator<",
      "auto",
      "forwarding reference",
      "universal reference",
      "reference collapsing",
      "perfect forwarding",
      "std::forward",
      "variadic templates",
      "parameter pack",
      "pack expansion",
      "generic lambda",
      "member function templates",
      "Dynarray",
      "std::unique_ptr",
      "std::vector",
      "emplace_back",
      "make_unique"
    ],
    "brief": "Introduction to C++ templates, covering function and class templates for generic programming, template argument deduction, forwarding references for perfect forwarding, variadic templates for handling multiple arguments, and additional template types like alias and variable templates."
  },
  "26": {
    "title": "Templates II",
    "keywords": [
      "template specialization",
      "function template",
      "class template",
      "partial specialization",
      "full specialization",
      "variadic templates",
      "parameter pack",
      "pack expansion",
      "sizeof...",
      "if constexpr",
      "compile-time if",
      "CRTP",
      "Curiously Recurring Template Pattern",
      "template metaprogramming",
      "is_same",
      "is_pointer",
      "Factorial",
      "IsPrime",
      "static_assert",
      "std::type_traits",
      "compile-time computation",
      "Turing-complete",
      "pure functional programming"
    ],
    "brief": "Covers template specialization for functions and classes, including partial and full specializations. Introduces variadic templates with a print function example, using sizeof... and if constexpr for compile-time control. Explains the CRTP idiom for code reuse and safe downcasting. Provides an introduction to template metaprogramming, demonstrating compile-time computations like factorial and prime checking, and mentions standard library utilities like std::is_same and std::is_pointer."
  },
  "27": {
    "title": "Other Facilities in the Standard Library",
    "keywords": [
      "std::function",
      "callable",
      "lambda",
      "pointer-to-function",
      "std::optional",
      "std::nullopt",
      "std::string_view",
      "non-owning reference",
      "dangling reference",
      "std::pair",
      "std::tuple",
      "structured binding",
      "C++20",
      "ranges library",
      "std::ranges::sort",
      "formatting library",
      "std::format",
      "std::print",
      "std::variant",
      "std::any",
      "concurrency",
      "concepts",
      "coroutines",
      "modules",
      "three-way comparison"
    ],
    "brief": "Covers C++17 standard library facilities including std::function for callable objects, std::optional for optional values, std::string_view for efficient string handling, and std::pair/tuple for data structures, with best practices and pitfalls. Introduces C++20 features like ranges for composable algorithms, formatting for type-safe output, and future directions such as concurrency and linear algebra."
  },
  "28": {
    "title": "Compile-time Computations and Metaprogramming",
    "keywords": [
      "constexpr",
      "consteval",
      "concept",
      "requires",
      "metaprogramming",
      "compile-time computation",
      "template metaprogramming",
      "preprocessor macros",
      "binary literals",
      "constant expressions",
      "pure functions",
      "C++20",
      "constraints",
      "SFINAE",
      "ranges",
      "algorithms",
      "std::sort",
      "RandomAccessIterator",
      "compile-time polymorphism",
      "C++ evolution"
    ],
    "brief": "Covers compile-time computations and metaprogramming in C++, including techniques like constexpr and consteval functions, template and preprocessor metaprogramming for binary literals, concepts and constraints for template argument restrictions, and the evolution of C++ features from C++11 to C++20 and beyond."
  }
}